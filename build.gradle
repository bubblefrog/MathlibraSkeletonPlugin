apply plugin: "cpp"

model
{
toolChains {

		gcc(Gcc){
			target("linux_x86"){

				cppCompiler.withArguments { args ->
					args << "-m32"
				}
				linker.withArguments { args ->
					args << "-m32"
				}
			}
			target("linux_x64"){
				cppCompiler.withArguments { args ->
					args << "-m64"
				}
				linker.withArguments { args ->
					args << "-m64"
				}
			}
		}
		mingw(Gcc){
		    target("windows_x86")
            target("windows_x64")
		}
		arm(Gcc){
			if (project.hasProperty('ndktoolchain'))
				path project.properties['ndktoolchain']
			target("armeabiv7a")
		}
		clang(Clang){
			target("osx_x86"){
			cppCompiler.withArguments { args ->
            					args << "-m32"
            				}
            				linker.withArguments { args ->
            					args << "-m32"
            				}
			}
			target("osx_x64"){
			    cppCompiler.withArguments { args ->
                					args << "-m64"
                				}
                				linker.withArguments { args ->
                					args << "-m64"
                				}
			}
		}

	}

	platforms {
		armeabiv7a{
			architecture "arm"
			operatingSystem "linux"
		}
		linux_x86{
			architecture "x86"
			operatingSystem "linux"
		}
		linux_x64{
			architecture "x86_64"
			operatingSystem "linux"
		}
		windows_x86 {
                	architecture "x86"
                	operatingSystem "windows"
        	}
        	windows_x64 {
                	architecture "x86_64"
                	operatingSystem "windows"
        	}
        	osx_x86 {
                	architecture "x86"
                	operatingSystem "osx"
        	}
        	osx_x64 {
                	architecture "x86_64"
                	operatingSystem "osx"
        	}
		current{
		}
	}




	buildTypes {
		debug
		release
	}

    binaries{
            withType(StaticLibraryBinarySpec) {
            	buildable false
            }
    		all{
    		    if(!((targetPlatform.getName() == "current") || (project.hasProperty(targetPlatform.getName())))){
                    buildable = false
                }
                    if (targetPlatform == platforms.current){
                	    for(NativePlatform p : platforms){
                		    if(project.hasProperty(p.getName())){
                						buildable = false
                			}
                		}
                	}
                	if (buildable && targetPlatform.getName()=="armeabiv7a" && !project.hasProperty('ndktoolchain')){
                	    buildable = false
                	    throw new GradleException("No ndktoolchain set")
                	}



                if(toolChain in Gcc)
                			{
                				if(buildType == buildTypes.release)
                				{
                					cppCompiler.args "-std=c++11", "-O2","-Wall","-pedantic","-fPIC"
                					linker.args ""
                				}
                				else
                				{
                					cppCompiler.args "-std=c++11","-Wall","-pedantic","-g","-fPIC","-DTYPE_MEM_TEST"
                					linker.args ""
                				}
                			}else if(toolChain in Clang)
                			{
                				if(buildType == buildTypes.release)
                				{
                					cppCompiler.args "-std=c++11", "-O2","-Wall","-pedantic","-fPIC"
                					linker.args ""
                				}
                				else
                				{
                					cppCompiler.args "-std=c++11","-Wall","-pedantic","-g","-fPIC","-DTYPE_MEM_TEST"
                					linker.args ""
                				}
                			}
    		}
    	}


    components {
        	SkeletonPlugin(NativeLibrarySpec){
        				targetPlatform "armeabiv7a"
            			targetPlatform "linux_x86"
            			targetPlatform "linux_x64"
            			targetPlatform "windows_x86"
            			targetPlatform "windows_x64"
            			targetPlatform "osx_x86"
            			targetPlatform "osx_x64"
            			targetPlatform "current"
                sources {
                        cpp {
                            source {
                                    srcDir "src/"
                                    include "**/*.cpp"
                                }
                             }
                        }
        	}
        }
}